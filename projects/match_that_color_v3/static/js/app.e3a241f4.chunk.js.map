{"version":3,"sources":["src/utils/colors/index.tsx","src/components/colorView/index.tsx","App.tsx"],"names":["generateRandomTarget","grayscaleMode","gray","generateRandomTargetSingle","red","green","blue","alpha","printRGB","color","Math","round","random","rgbToHex","color1","rgbHex","rgbPercentageDiff","color2","r","calculateDiffPercentageSingle","g","b","mean","guess","target","max","t","diff","abs","percentageDiff","ColorView","useWindowDimensions","windowHeight","height","windowWidth","width","idealSize","min","size","View","style","backgroundColor","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","App","useState","health","setHealth","setGrayscaleMode","hexRgb","guessedColor","setGuessedColor","justGuessed","setJustGuessed","setPercentageDiff","targetColor","setTargetColor","targetsCount","setTargetsCount","gameOver","setGameOver","swatchDistance","useRef","Animated","Value","current","modalVisible","setModalVisible","useEffect","window","document","body","overflow","reset","timing","toValue","duration","useNativeDriver","start","roundsToZero","perfectGuess","colorsAreEqual","nearlyPerfect","notPerfectOrNearlyPerfect","targetMsg","SafeAreaView","styles","container","Modal","animationType","transparent","visible","onRequestClose","modal","Text","title","headerText","Pressable","button","onPress","headerContainer","x","score","StatusBar","resultsText","middleContainer","swatchContainer","swatchDesc","swatchGuess","bottom","marginLeft","playAgain","Button","bottomContainer","e","preventDefault","display","marginRight","alignItems","justifyContent","marginBottom","minimumValue","maximumValue","step","onValueChange","swatchesOnly","onColorChange","a","thumbSize","sliderSize","noSnap","row","swatches","discrete","newTarget","tries","_percentageDiff","old","StyleSheet","create","flex","paddingTop","flexDirection","padding","fontSize","textAlign","position","margin","slider","arrowDown","left","TRIANGLE_WIDTH","borderStyle","borderLeftWidth","borderRightWidth","borderBottomWidth","borderLeftColor","borderRightColor","borderBottomColor","transform","rotate","paddingBottom"],"mappings":"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","file":"static/js/app.e3a241f4.chunk.js","sourcesContent":["import { mean } from 'lodash';\r\nimport rgbHex from 'rgb-hex';\r\n//hexRgb('4183c4');\r\n//=> {red: 65, green: 131, blue: 196, alpha: 1}\r\n\r\nexport type ColorRGB = {\r\n red: number,\r\n green: number,\r\n blue: number,\r\n alpha?: number   \r\n};\r\n\r\nconst MIN_PERCENTAGE_THRESHOLD = 5.0;\r\n\r\nexport const colorsAreEqual = (color1:ColorRGB, color2:ColorRGB) => {\r\n    return rgbHex(color1.red ?? 0, color1.green ?? 0, color1.blue ?? 0) === \r\n        rgbHex(color2.red ?? 1, color2.green ?? 1, color2.blue ?? 1);\r\n};\r\n\r\nexport const generateRandomTarget = (grayscaleMode:boolean):ColorRGB => {\r\n    if(grayscaleMode) {\r\n       const gray = generateRandomTargetSingle();\r\n       return {\r\n        red: gray,\r\n        green: gray,\r\n        blue: gray,\r\n        alpha: 1\r\n       };\r\n    }\r\n    return {\r\n        red: generateRandomTargetSingle(),\r\n        green: generateRandomTargetSingle(),\r\n        blue: generateRandomTargetSingle(),\r\n        alpha: 1\r\n    };\r\n};\r\n\r\nexport const generateGrayscale = (gray:number) => {\r\n    return {\r\n        red: gray,\r\n        green: gray,\r\n        blue: gray,\r\n        alpha: 1\r\n    }\r\n};\r\n\r\nexport const printRGB = (color:ColorRGB) => {\r\n    const { red, green, blue } = color;\r\n    return `rgb:${red}, ${green}, ${blue}`;\r\n};\r\n\r\nconst generateRandomTargetSingle = () => {\r\n    return Math.round(Math.random() * 255);\r\n};\r\n\r\nexport const rgbToHex = (color1: ColorRGB) => {\r\n    return '#' + rgbHex(color1.red ?? 0, color1.green ?? 0, color1.blue ??0) \r\n};\r\n\r\nexport const rgbPercentageDiff = (color1:ColorRGB, color2:ColorRGB) => {\r\n    const r = calculateDiffPercentageSingle(color1.red, color2.red);\r\n    const g = calculateDiffPercentageSingle(color1.green, color2.green);\r\n    const b = calculateDiffPercentageSingle(color1.blue, color2.blue);\r\n    return mean([r, g, b]);\r\n};\r\n\r\nconst calculateDiffPercentageSingle = (guess:number, target:number, max = 255) => {\r\n   const g = (guess / max);\r\n   const t = (target / max);\r\n   const diff = Math.abs(g-t);\r\n   const percentageDiff = diff * 100;\r\n   return percentageDiff;\r\n};\r\n\r\nexport const closeEnough = (color1:ColorRGB, color2:ColorRGB) => {\r\n    const percentageDiff = rgbPercentageDiff(color1, color2);\r\n    return percentageDiff <= MIN_PERCENTAGE_THRESHOLD;\r\n};\r\n\r\n\r\n/*\r\n// 0-1 value to 0-255 value\r\nconst scaleToValue = (value:number) => {\r\n    const transformed = scale(value, 0, 1, 0, 255);\r\n    return transformed;\r\n};\r\n\r\n// Map number to another range:\r\nconst scale = (\r\n    number:number, \r\n    fromLeft:number, \r\n    fromRight:number, \r\n    toLeft:number, \r\n    toRight:number\r\n) => {\r\n    return toLeft + (number - fromLeft) / (fromRight - fromLeft) * (toRight - toLeft)\r\n};\r\n*/","import { useWindowDimensions, View } from 'react-native';\r\nimport { ColorRGB, rgbToHex } from 'src/utils/colors';\r\n\r\ntype Props = {\r\n    color:ColorRGB;\r\n};\r\n\r\nconst SWATCH_SIZE = 80;\r\nexport default function ColorView ({ color }: Props) {\r\n    const { height: windowHeight, width: windowWidth } = useWindowDimensions();\r\n    const idealSize = Math.min(windowHeight * 0.15, windowWidth * 0.30);\r\n    const size = Math.max(SWATCH_SIZE, idealSize);\r\n    return <View\r\n        style={{\r\n            backgroundColor: rgbToHex(color),\r\n            borderRadius: size,\r\n            width: size,\r\n            height: size,\r\n            // Shadow :\r\n            // elevation: 8, // android shadow fix, works but gets in the way\r\n            // io + web shadow\r\n            shadowColor: '#171717',\r\n            shadowOffset: {width: 4, height: 9},\r\n            shadowOpacity: 0.2,\r\n            shadowRadius: 3,\r\n        }}\r\n    />\r\n};","import { StatusBar } from 'expo-status-bar';\r\nimport ColorPicker from 'react-native-wheel-color-picker'\r\nimport { useRef, useState, useEffect } from 'react';\r\nimport { Button, StyleSheet, Text, View, SafeAreaView, Animated, Pressable, Modal } from 'react-native';\r\nimport ColorView from 'src/components/colorView';\r\nimport { closeEnough, colorsAreEqual, generateGrayscale, generateRandomTarget, printRGB, rgbPercentageDiff, rgbToHex } from 'src/utils/colors';\r\nimport hexRgb from 'hex-rgb';\r\nimport Slider from '@react-native-community/slider';\r\n\r\nconst SWATCH_DISTANCE = 20;\r\nconst END_SWATCH_DISTANCE = -40;\r\nconst GREEN = '#0cab00';\r\nconst GRAY_BG = '#eee';\r\nconst TRIANGLE_WIDTH = 15;\r\nconst STARTING_HEALTH = 10;\r\n\r\nexport default function App() {\r\n  const [health, setHealth] = useState(STARTING_HEALTH);\r\n  const [grayscaleMode, setGrayscaleMode] = useState(true);\r\n  const [guessedColor, setGuessedColor] = useState(hexRgb('#000'));\r\n  const [justGuessed, setJustGuessed] = useState(false);\r\n  const [percentageDiff, setPercentageDiff] = useState(-1); \r\n  const [targetColor, setTargetColor] = useState(generateRandomTarget(grayscaleMode));\r\n  const [targetsCount, setTargetsCount] = useState(0);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const swatchDistance= useRef(new Animated.Value(SWATCH_DISTANCE)).current;\r\n  \r\n  const [modalVisible, setModalVisible] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // 👇️ set style on body element\r\n    if(window?.document?.body?.style != null)\r\n      document.body.style.overflow = 'hidden';\r\n  }, []);\r\n\r\n  const reset = () => {\r\n    setJustGuessed(false);\r\n    setPercentageDiff(-1);\r\n\r\n    setTargetColor(generateRandomTarget(grayscaleMode));\r\n    Animated.timing(swatchDistance, {\r\n      toValue: SWATCH_DISTANCE,\r\n      duration: 0,\r\n      useNativeDriver: false\r\n    }).start();\r\n    \r\n    setHealth(STARTING_HEALTH);\r\n    setTargetsCount(0);\r\n    setGameOver(false);\r\n  };\r\n  \r\n  useEffect(() => {\r\n    reset();\r\n  }, [grayscaleMode]);\r\n\r\n  const updateHealth = (diff:number) => {\r\n    if(roundsToZero(diff)) {\r\n      return;\r\n    }\r\n    setHealth(old => {\r\n      return old - Math.abs(Math.round(diff));\r\n    });\r\n  };\r\n  \r\n  const roundsToZero = (diff:number) => {\r\n     return Math.round(diff) === 0;\r\n  }\r\n  \r\n  const perfectGuess = colorsAreEqual(guessedColor, targetColor);\r\n  const nearlyPerfect = roundsToZero(percentageDiff)  && !perfectGuess;\r\n  const notPerfectOrNearlyPerfect = perfectGuess || nearlyPerfect;\r\n  const targetMsg = targetsCount >= 1 ? `Target #${targetsCount + 1}: ` : 'Target: ';\r\n\r\n  useEffect(() => {\r\n    if(health <= 0) {\r\n      setGameOver(true);\r\n    }\r\n  }, [health]);\r\n  \r\n  const bottomContainerEl = () => {\r\n    if (gameOver) return <View style={styles.headerContainer}>\r\n      <Text style={styles.headerText}> All Health Depleted! </Text>\r\n      <View style={styles.playAgain}>\r\n      <Button title='Play Again' onPress={() => setModalVisible(true)} />\r\n      </View>\r\n    </View>\r\n\r\n    return <View style={styles.bottomContainer}>\r\n      <Pressable\r\n        onPress={(e) => {e.preventDefault();}}\r\n        style={{\r\n        display: 'flex',\r\n        marginRight: 20,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        height: 200, width: '100%'\r\n      }}>\r\n        {grayscaleMode &&\r\n          <Slider\r\n            style={{ width: '100%', marginBottom: 0, height: 30 }}\r\n            minimumValue={0}\r\n            maximumValue={255}\r\n            step={1}\r\n            onValueChange={(x) => {\r\n              setGuessedColor(generateGrayscale(x));\r\n            }}\r\n          />}\r\n        {!grayscaleMode &&\r\n          <ColorPicker\r\n            swatchesOnly={false}\r\n            onColorChange={a => {\r\n              setGuessedColor(hexRgb(a));\r\n            }}\r\n            thumbSize={40}\r\n            sliderSize={60}\r\n            noSnap={true}\r\n            row={true}\r\n            swatches={false}\r\n            discrete={false}\r\n          />}\r\n      </Pressable>\r\n\r\n      {justGuessed &&\r\n        <Button\r\n          title='Next Challenge'\r\n          color={GREEN}\r\n          onPress={() => {\r\n            setTargetsCount(x => x + 1);\r\n            Animated.timing(swatchDistance, {\r\n              toValue: SWATCH_DISTANCE,\r\n              duration: 100,\r\n              useNativeDriver: false\r\n            }).start();\r\n\r\n            let newTarget = generateRandomTarget(grayscaleMode);\r\n            // Don't choose something too close:\r\n            let tries = 0;\r\n            while (closeEnough(guessedColor, newTarget) && tries < 10) {\r\n              tries++;\r\n              newTarget = generateRandomTarget(grayscaleMode);\r\n            }\r\n\r\n            setTargetColor(newTarget);\r\n            setJustGuessed(false);\r\n          }} />\r\n      }\r\n      {!justGuessed &&\r\n        <Button\r\n          title='Submit Guess'\r\n          onPress={() => {\r\n            setJustGuessed(true);\r\n            const _percentageDiff = rgbPercentageDiff(guessedColor, targetColor);\r\n            updateHealth(_percentageDiff);\r\n            setPercentageDiff(_percentageDiff);\r\n\r\n            Animated.timing(swatchDistance, {\r\n              toValue: END_SWATCH_DISTANCE,\r\n              duration: 1500,\r\n              useNativeDriver: false\r\n            }).start();\r\n          }} />\r\n      }\r\n    </View>\r\n  };\r\n \r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <Modal\r\n        animationType=\"slide\"\r\n        transparent={false}\r\n        visible={modalVisible}\r\n        onRequestClose={() => {\r\n          setModalVisible(!modalVisible);\r\n        }}\r\n      >\r\n        <View style={styles.modal}>\r\n          <Text style={styles.title}>Match That Color</Text>\r\n          <Text style={styles.headerText}>Select your difficulty level:</Text>\r\n          <Pressable \r\n            style={styles.button}\r\n            onPress={() => {\r\n            setModalVisible(false);\r\n            setGrayscaleMode(true);\r\n            reset();\r\n          }}>\r\n            <Text>Grayscale Only</Text>\r\n          </Pressable>\r\n          \r\n          <Pressable\r\n            style={styles.button}\r\n            onPress={() => {\r\n            setModalVisible(false);\r\n            setGrayscaleMode(false);\r\n            reset();\r\n          }}>\r\n            <Text>All Colors</Text>\r\n          </Pressable>\r\n          \r\n        </View>\r\n      </Modal>\r\n      <View style={styles.headerContainer}>\r\n        <Text onPress={() => setModalVisible(x => !x)} style={styles.score}>\r\n          Health: {Math.round(health)}%\r\n        </Text>\r\n        <StatusBar style=\"auto\" />\r\n        {!justGuessed && <Text style={styles.resultsText}>Match the colors:</Text>}\r\n        {justGuessed && !notPerfectOrNearlyPerfect && <Text style={styles.resultsText}> You were within: {Math.round(percentageDiff)}%</Text>}\r\n        {justGuessed && nearlyPerfect && <Text style={styles.resultsText}>Nearly Perfect Guess!</Text>}\r\n        {justGuessed && perfectGuess && <Text style={styles.resultsText}>Perfect Guess!</Text>}\r\n      </View>\r\n\r\n      <View style={styles.middleContainer}>\r\n        <Pressable style={styles.swatchContainer} \r\n          onPress={() => { setGrayscaleMode(x => !x) }}>\r\n          <ColorView color={targetColor} />\r\n          <View>\r\n            {!justGuessed && <Text style={styles.swatchDesc}>Target</Text>}\r\n            {justGuessed && <View>\r\n              <Text style={styles.swatchDesc}>{targetMsg}</Text> \r\n              <Text style={[styles.swatchGuess, { bottom: -50}]}>{printRGB(targetColor)}</Text>\r\n            </View>}\r\n          </View>\r\n        </Pressable>\r\n        <Animated.View style={[styles.swatchContainer, {marginLeft: swatchDistance}]}>\r\n          <ColorView color={guessedColor} />\r\n          <View>\r\n            {<Text style={styles.swatchDesc}>Your Guess:</Text>}\r\n            {<Text style={styles.swatchGuess}>{printRGB(guessedColor)}</Text>}\r\n          </View>\r\n        </Animated.View>\r\n      </View>\r\n      {bottomContainerEl()}\r\n    </SafeAreaView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    height: '100%',\r\n    width: '100%',\r\n    display: 'flex',\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between'\r\n  },\r\n  headerContainer: {\r\n    paddingTop: 10,\r\n    alignItems: 'center'\r\n  },\r\n  middleContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'center',\r\n    width: '100%'\r\n  },\r\n  bottomContainer: {\r\n    padding: 10,\r\n    width: '100%'\r\n  },\r\n  score: {\r\n    fontSize: 22\r\n  },\r\n  resultsText: {\r\n    textAlign: 'center',\r\n    paddingTop: 20,\r\n    fontSize: 38\r\n  },\r\n  swatchContainer: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: 10,\r\n    borderRadius: 10\r\n  },\r\n  swatchGuess: {\r\n    position: 'absolute',\r\n    width: '150%',\r\n    bottom: -10\r\n  },\r\n  swatchDesc: {\r\n    padding: 10\r\n  },\r\n  button: {\r\n    textAlign: 'center',\r\n    padding: 20,\r\n    margin: 20,\r\n    borderRadius: 20,\r\n    backgroundColor: GRAY_BG\r\n  },\r\n  slider: { \r\n    width: '100%', \r\n    height: 40 \r\n  },\r\n  arrowDown: {\r\n    position: 'absolute',\r\n    left: TRIANGLE_WIDTH/2,\r\n    bottom: -1 * TRIANGLE_WIDTH,\r\n    width: 0,\r\n    height: 0,\r\n    backgroundColor: \"transparent\",\r\n    borderStyle: \"solid\",\r\n    borderLeftWidth: TRIANGLE_WIDTH,\r\n    borderRightWidth: TRIANGLE_WIDTH,\r\n    borderBottomWidth: TRIANGLE_WIDTH * 2,\r\n    borderLeftColor: \"transparent\",\r\n    borderRightColor: \"transparent\",\r\n    borderBottomColor: GRAY_BG,\r\n    transform: [{ rotate: \"180deg\" }]\r\n  },\r\n  title: {\r\n    textAlign: 'center',\r\n    paddingBottom: 20,\r\n    fontSize: 26\r\n  },\r\n  headerText: {\r\n    fontSize: 20,\r\n    paddingBottom: 10\r\n  },\r\n  playAgain: {\r\n    paddingBottom: 5\r\n  },\r\n  modal: {\r\n    padding: 30\r\n  }\r\n});\r\n"],"sourceRoot":""}