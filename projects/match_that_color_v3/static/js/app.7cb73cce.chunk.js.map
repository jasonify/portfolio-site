{"version":3,"sources":["src/utils/colors/index.tsx","src/components/colorView/index.tsx","App.tsx"],"names":["generateRandomTarget","red","generateRandomTargetSingle","green","blue","alpha","printRGB","color","Math","round","random","rgbToHex","color1","rgbHex","rgbPercentageDiff","color2","r","calculateDiffPercentageSingle","g","b","console","log","mean","guess","target","max","t","diff","abs","percentageDiff","ColorView","useWindowDimensions","windowHeight","height","windowWidth","width","idealSize","min","size","View","style","backgroundColor","borderRadius","shadowColor","shadowOffset","shadowOpacity","shadowRadius","App","useState","health","setHealth","hexRgb","guessedColor","setGuessedColor","justGuessed","setJustGuessed","setPercentageDiff","targetColor","setTargetColor","targetsCount","setTargetsCount","gameOver","setGameOver","swatchDistance","useRef","Animated","Value","current","reset","timing","toValue","duration","useNativeDriver","start","roundsToZero","perfectGuess","colorsAreEqual","nearlyPerfect","notPerfectOrNearlyPerfect","targetMsg","useEffect","SafeAreaView","styles","container","headerContainer","Text","onPress","score","StatusBar","resultsText","middleContainer","swatchContainer","swatchDesc","marginLeft","headerText","playAgain","Button","title","bottomContainer","display","marginRight","alignItems","justifyContent","swatchesOnly","onColorChange","a","thumbSize","sliderSize","noSnap","row","swatches","discrete","x","newTarget","tries","_percentageDiff","old","StyleSheet","create","flex","paddingTop","flexDirection","padding","fontSize","textAlign","slider","arrowDown","position","left","TRIANGLE_WIDTH","bottom","borderStyle","borderLeftWidth","borderRightWidth","borderBottomWidth","borderLeftColor","borderRightColor","borderBottomColor","transform","rotate","paddingBottom"],"mappings":"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","file":"static/js/app.7cb73cce.chunk.js","sourcesContent":["import { mean } from 'lodash';\r\nimport rgbHex from 'rgb-hex';\r\n//hexRgb('4183c4');\r\n//=> {red: 65, green: 131, blue: 196, alpha: 1}\r\n\r\nexport type ColorRGB = {\r\n red: number,\r\n green: number,\r\n blue: number,\r\n alpha?: number   \r\n};\r\n\r\nconst MIN_PERCENTAGE_THRESHOLD = 5.0;\r\n\r\nexport const colorsAreEqual = (color1:ColorRGB, color2:ColorRGB) => {\r\n    return rgbHex(color1.red ?? 0, color1.green ?? 0, color1.blue ?? 0) === \r\n        rgbHex(color2.red ?? 1, color2.green ?? 1, color2.blue ?? 1);\r\n};\r\n\r\nexport const generateRandomTarget = ():ColorRGB => {\r\n    return {\r\n        red: generateRandomTargetSingle(),\r\n        green: generateRandomTargetSingle(),\r\n        blue: generateRandomTargetSingle(),\r\n        alpha: 1\r\n    };\r\n};\r\n\r\nexport const printRGB = (color:ColorRGB) => {\r\n    const { red, green, blue } = color;\r\n    return `rgb:${red}, ${green}, ${blue}`;\r\n}\r\n\r\nconst generateRandomTargetSingle = () => {\r\n    return Math.round(Math.random() * 255);\r\n};\r\n\r\nexport const rgbToHex = (color1: ColorRGB) => {\r\n    return '#' + rgbHex(color1.red ?? 0, color1.green ?? 0, color1.blue ??0) \r\n}\r\nexport const rgbPercentageDiff = (color1:ColorRGB, color2:ColorRGB) => {\r\n    const r = calculateDiffPercentageSingle(color1.red, color2.red);\r\n    const g = calculateDiffPercentageSingle(color1.green, color2.green);\r\n    const b = calculateDiffPercentageSingle(color1.blue, color2.blue);\r\n    console.log('rgb', r, g, b, mean([r, g, b]));\r\n    return mean([r, g, b]);\r\n};\r\n\r\nconst calculateDiffPercentageSingle = (guess:number, target:number, max = 255) => {\r\n   const g = (guess / max);\r\n   const t = (target / max);\r\n   const diff = Math.abs(g-t);\r\n   const percentageDiff = diff * 100;\r\n   return percentageDiff;\r\n}\r\n\r\nexport const closeEnough = (color1:ColorRGB, color2:ColorRGB) => {\r\n    const percentageDiff = rgbPercentageDiff(color1, color2);\r\n    return percentageDiff <= MIN_PERCENTAGE_THRESHOLD;\r\n};\r\n\r\n\r\n/*\r\n// 0-1 value to 0-255 value\r\nconst scaleToValue = (value:number) => {\r\n    const transformed = scale(value, 0, 1, 0, 255);\r\n    return transformed;\r\n};\r\n\r\n// Map number to another range:\r\nconst scale = (\r\n    number:number, \r\n    fromLeft:number, \r\n    fromRight:number, \r\n    toLeft:number, \r\n    toRight:number\r\n) => {\r\n    return toLeft + (number - fromLeft) / (fromRight - fromLeft) * (toRight - toLeft)\r\n};\r\n*/","import { useWindowDimensions, View } from 'react-native';\r\nimport { ColorRGB, rgbToHex } from 'src/utils/colors';\r\n\r\ntype Props = {\r\n    color:ColorRGB;\r\n};\r\n\r\nconst SWATCH_SIZE = 90;\r\nexport default function ColorView ({ color }: Props) {\r\n    const { height: windowHeight, width: windowWidth } = useWindowDimensions();\r\n    const idealSize = Math.min(windowHeight * 0.2, windowWidth * 0.40);\r\n    const size = Math.max(SWATCH_SIZE, idealSize);\r\n    return <View\r\n        style={{\r\n            backgroundColor: rgbToHex(color),\r\n            borderRadius: size,\r\n            width: size,\r\n            height: size,\r\n            // Shadow :\r\n            // elevation: 8, // android shadow fix, works but gets in the way\r\n            // io + web shadow\r\n            shadowColor: '#171717',\r\n            shadowOffset: {width: 4, height: 9},\r\n            shadowOpacity: 0.2,\r\n            shadowRadius: 3,\r\n        }}\r\n    />\r\n};","import { StatusBar } from 'expo-status-bar';\r\nimport ColorPicker from 'react-native-wheel-color-picker'\r\nimport { useRef, useState, useEffect } from 'react';\r\nimport { Button, StyleSheet, Text, View, SafeAreaView, Animated } from 'react-native';\r\nimport ColorView from 'src/components/colorView';\r\nimport { closeEnough, colorsAreEqual, generateRandomTarget, printRGB, rgbPercentageDiff, rgbToHex } from 'src/utils/colors';\r\nimport hexRgb from 'hex-rgb';\r\n\r\nconst SWATCH_DISTANCE = 20;\r\nconst END_SWATCH_DISTANCE = -40;\r\nconst GREEN = '#0cab00';\r\nconst GRAY_BG = '#eee';\r\nconst TRIANGLE_WIDTH = 15;\r\nconst STARTING_HEALTH = 100;\r\n\r\nexport default function App() {\r\n  const [health, setHealth] = useState(STARTING_HEALTH);\r\n  const [guessedColor, setGuessedColor] = useState(hexRgb('#aabbcc'));\r\n  const [justGuessed, setJustGuessed] = useState(false);\r\n  const [percentageDiff, setPercentageDiff] = useState(-1); \r\n  const [targetColor, setTargetColor] = useState(generateRandomTarget());\r\n  const [targetsCount, setTargetsCount] = useState(0);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const swatchDistance= useRef(new Animated.Value(SWATCH_DISTANCE)).current;\r\n\r\n  const reset = () => {\r\n    setJustGuessed(false);\r\n    setPercentageDiff(-1);\r\n\r\n    setTargetColor(generateRandomTarget());\r\n    Animated.timing(swatchDistance, {\r\n      toValue: SWATCH_DISTANCE,\r\n      duration: 0,\r\n      useNativeDriver: false\r\n    }).start();\r\n    \r\n    setHealth(STARTING_HEALTH);\r\n    setTargetsCount(0);\r\n    setGameOver(false);\r\n  };\r\n\r\n  const updateHealth = (diff:number) => {\r\n    if(roundsToZero(diff)) {\r\n      return;\r\n    }\r\n    setHealth(old => {\r\n      return old - Math.abs(Math.round(diff));\r\n    });\r\n  };\r\n  \r\n  const roundsToZero = (diff:number) => {\r\n     return Math.round(diff) === 0;\r\n  }\r\n  \r\n  const perfectGuess = colorsAreEqual(guessedColor, targetColor);\r\n  const nearlyPerfect = roundsToZero(percentageDiff)  && !perfectGuess;\r\n  const notPerfectOrNearlyPerfect = perfectGuess || nearlyPerfect;\r\n  const targetMsg = targetsCount >= 1 ? `Target #${targetsCount + 1}: ` : 'Target: ';\r\n\r\n  useEffect(() => {\r\n    if(health <= 0) {\r\n      setGameOver(true);\r\n    }\r\n  }, [health]);\r\n  \r\n  const bottomContainerEl = () => {\r\n    if (gameOver) return <View style={styles.headerContainer}>\r\n      <Text style={styles.headerText}> All Health Depleted! </Text>\r\n      <View style={styles.playAgain}>\r\n      <Button title='Play Again' onPress={reset} />\r\n      </View>\r\n    </View>\r\n\r\n    return <View style={styles.bottomContainer}>\r\n      <View style={{\r\n        display: 'flex',\r\n        marginRight: 20,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        height: 200, width: '100%'\r\n      }}>\r\n        <ColorPicker\r\n          color={rgbToHex(guessedColor)}\r\n          swatchesOnly={false}\r\n          onColorChange={a => {\r\n            setGuessedColor(hexRgb(a));\r\n          }}\r\n          thumbSize={40}\r\n          sliderSize={60}\r\n          noSnap={true}\r\n          row={true}\r\n          swatches={false}\r\n          discrete={false}\r\n        />\r\n      </View>\r\n\r\n      {justGuessed &&\r\n        <Button\r\n          title='Next Challenge'\r\n          color={GREEN}\r\n          onPress={() => {\r\n            setTargetsCount(x => x + 1);\r\n            Animated.timing(swatchDistance, {\r\n              toValue: SWATCH_DISTANCE,\r\n              duration: 100,\r\n              useNativeDriver: false\r\n            }).start();\r\n\r\n            let newTarget = generateRandomTarget();\r\n            // Don't choose something too close:\r\n            let tries = 0;\r\n            while (closeEnough(guessedColor, newTarget) && tries < 10) {\r\n              tries++;\r\n              newTarget = generateRandomTarget();\r\n            }\r\n\r\n            setTargetColor(newTarget);\r\n            setJustGuessed(false);\r\n          }} />\r\n      }\r\n      {!justGuessed &&\r\n        <Button\r\n          title='Submit Guess'\r\n          onPress={() => {\r\n            setJustGuessed(true);\r\n            const _percentageDiff = rgbPercentageDiff(guessedColor, targetColor);\r\n            updateHealth(_percentageDiff);\r\n            setPercentageDiff(_percentageDiff);\r\n\r\n            Animated.timing(swatchDistance, {\r\n              toValue: END_SWATCH_DISTANCE,\r\n              duration: 1500,\r\n              useNativeDriver: false\r\n            }).start();\r\n          }} />\r\n      }\r\n    </View>\r\n  };\r\n \r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <View style={styles.headerContainer}>\r\n        <Text onPress={reset} style={styles.score}>\r\n          Health: {Math.round(health)}%\r\n        </Text>\r\n        \r\n        <StatusBar style=\"auto\" />\r\n        {!justGuessed && <Text style={styles.resultsText}>Match the colors:</Text>}\r\n        {justGuessed && !notPerfectOrNearlyPerfect && <Text style={styles.resultsText}> You were within: {Math.round(percentageDiff)}%</Text>}\r\n        {justGuessed && nearlyPerfect && <Text style={styles.resultsText}>Nearly Perfect Guess!</Text>}\r\n        {justGuessed && perfectGuess && <Text style={styles.resultsText}>Perfect Guess!</Text>}\r\n      </View>\r\n\r\n      <View style={styles.middleContainer}>\r\n        <View style={styles.swatchContainer}>\r\n          <ColorView color={targetColor} />\r\n          <View>\r\n            {!justGuessed && <Text style={styles.swatchDesc}>Target</Text>}\r\n            {justGuessed && <View>\r\n              <Text style={styles.swatchDesc}>{targetMsg}</Text> \r\n              <Text style={styles.swatchDesc}>{printRGB(targetColor)}</Text>\r\n            </View>}\r\n          </View>\r\n        </View>\r\n        <Animated.View style={[styles.swatchContainer, {marginLeft: swatchDistance}]}>\r\n          <ColorView color={guessedColor} />\r\n          <View>\r\n            {<Text style={styles.swatchDesc}>Your Guess:</Text>}\r\n            {<Text style={styles.swatchDesc}>{printRGB(guessedColor)}</Text>}\r\n          </View>\r\n        </Animated.View>\r\n      </View>\r\n      {bottomContainerEl()}\r\n    </SafeAreaView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    display: 'flex',\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between'\r\n  },\r\n  headerContainer: {\r\n    paddingTop: 10,\r\n    alignItems: 'center'\r\n  },\r\n  middleContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'center',\r\n    width: '100%'\r\n  },\r\n  bottomContainer: {\r\n    padding: 10,\r\n    width: '100%'\r\n  },\r\n  score: {\r\n    fontSize: 22\r\n  },\r\n  resultsText: {\r\n    textAlign: 'center',\r\n    paddingTop: 20,\r\n    fontSize: 38\r\n  },\r\n  swatchContainer: {\r\n    display: 'flex',\r\n    alignItems: 'center'\r\n  },\r\n  swatchDesc: {\r\n    padding: 10\r\n  },\r\n  slider: { \r\n    width: '100%', \r\n    height: 40 \r\n  },\r\n  arrowDown: {\r\n    position: 'absolute',\r\n    left: TRIANGLE_WIDTH/2,\r\n    bottom: -1 * TRIANGLE_WIDTH,\r\n    width: 0,\r\n    height: 0,\r\n    backgroundColor: \"transparent\",\r\n    borderStyle: \"solid\",\r\n    borderLeftWidth: TRIANGLE_WIDTH,\r\n    borderRightWidth: TRIANGLE_WIDTH,\r\n    borderBottomWidth: TRIANGLE_WIDTH * 2,\r\n    borderLeftColor: \"transparent\",\r\n    borderRightColor: \"transparent\",\r\n    borderBottomColor: GRAY_BG,\r\n    transform: [{ rotate: \"180deg\" }]\r\n  },\r\n  headerText: {\r\n    fontSize: 20,\r\n    paddingBottom: 10\r\n  },\r\n  playAgain: {\r\n    paddingBottom: 5\r\n  }\r\n});\r\n"],"sourceRoot":""}