{"version":3,"sources":["src/utils/colors/index.tsx","src/components/colorView/index.tsx","App.tsx"],"names":["generateRandomTarget","Math","random","closeEnough","guess","target","abs","scaleToValue","value","fromLeft","toLeft","valueToColor","hex","floor","toString","length","numberToHex","ColorView","color","useWindowDimensions","windowHeight","height","windowWidth","width","idealSize","min","size","max","View","style","backgroundColor","borderRadius","App","useState","health","setHealth","guessedValue","setGuessedValue","justGuessed","setJustGuessed","percentageDiff","setPercentageDiff","setTarget","targetsCount","setTargetsCount","gameOver","setGameOver","swatchDistance","useRef","Animated","Value","current","tutorialOpacity","reset","timing","toValue","duration","useNativeDriver","start","hideTutorial","roundsToZero","diff","round","target255","guess255","perfectGuess","nearlyPerfect","notPerfectOrNearlyPerfect","targetMsg","useEffect","SafeAreaView","styles","container","headerContainer","Text","onPress","score","StatusBar","resultsText","middleContainer","swatchContainer","marginBottom","swatchDesc","headerText","playAgain","Button","title","bottomContainer","position","left","top","padding","paddingLeft","marginRight","marginLeft","opacity","arrowDown","minimumValue","maximumValue","step","disabled","slider","onSlidingStart","onValueChange","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","x","newTarget","tries","_percentageDiff","g","t","calculateDiff","old","StyleSheet","create","display","flex","alignItems","justifyContent","paddingTop","fontSize","textAlign","TRIANGLE_WIDTH","bottom","borderStyle","borderLeftWidth","borderRightWidth","borderBottomWidth","borderLeftColor","borderRightColor","borderBottomColor","transform","rotate","paddingBottom"],"mappings":"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","file":"static/js/app.d9682163.chunk.js","sourcesContent":["const MAX = 1.0;\r\nconst MIN_THRESHOLD = 0.05;\r\n\r\nexport const generateRandomTarget = () => {\r\n    return Math.random();\r\n};\r\n\r\nexport const calculateDiff = (guess:number, target:number, max = 1.0) => {\r\n   const g = (guess / max);\r\n   const t = (target / max);\r\n   const diff = Math.abs(g-t);\r\n   const percentageDiff = diff * 100;\r\n   return percentageDiff;\r\n}\r\nexport const closeEnough = (guess:number, target:number) => {\r\n    const diff = Math.abs(target - guess);\r\n    return diff <= MIN_THRESHOLD;\r\n};\r\n\r\nexport const numberToHex = (value:number) => {\r\n    const hex = Math.floor(value).toString(16);\r\n    if (hex.length < 2) {\r\n        return '0' + hex;\r\n    }\r\n    return hex;\r\n};\r\n\r\nexport const scale = (\r\n    number:number, \r\n    fromLeft:number, \r\n    fromRight:number, \r\n    toLeft:number, \r\n    toRight:number\r\n) => {\r\n    return toLeft + (number - fromLeft) / (fromRight - fromLeft) * (toRight - toLeft)\r\n};\r\n\r\n// 0-1 value to 0-255 value\r\nexport const scaleToValue = (value:number) => {\r\n    const transformed = scale(value, 0, MAX, 0, 255);\r\n    return transformed;\r\n};\r\nexport const valueToColor = (value:number) => {\r\n    const transformed = scaleToValue(value);\r\n    const hex = numberToHex(transformed);\r\n    return `#${hex}${hex}${hex}`;\r\n};\r\n","import { useWindowDimensions, View } from 'react-native';\r\nimport { valueToColor } from 'src/utils/colors';\r\n\r\ntype Props = {\r\n    color:number;\r\n};\r\n\r\nconst SWATCH_SIZE = 100;\r\nexport default function ColorView ({ color }: Props) {\r\n    const { height: windowHeight, width: windowWidth } = useWindowDimensions();\r\n    const idealSize = Math.min(windowHeight * 0.2, windowWidth * 0.9);\r\n    const size = Math.max(SWATCH_SIZE, idealSize);\r\n    return <View\r\n        style={{\r\n            backgroundColor: valueToColor(color),\r\n            borderRadius: size,\r\n            width: size,\r\n            height: size\r\n        }}\r\n    />\r\n};","import Slider from '@react-native-community/slider';\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport { useRef, useState, useEffect } from 'react';\r\nimport { Button, StyleSheet, Text, View, SafeAreaView, Animated } from 'react-native';\r\nimport ColorView from 'src/components/colorView';\r\nimport { calculateDiff, closeEnough, generateRandomTarget, scaleToValue } from 'src/utils/colors';\r\n\r\nconst SWATCH_DISTANCE = 10;\r\nconst END_SWATCH_DISTANCE = -20;\r\nconst GREEN = '#0cab00';\r\nconst GRAY_BG = '#eee';\r\nconst TRIANGLE_WIDTH = 15;\r\nconst STARTING_HEALTH = 100;\r\n\r\nexport default function App() {\r\n  const [health, setHealth] = useState(STARTING_HEALTH);\r\n  const [guessedValue, setGuessedValue] = useState(0);\r\n  const [justGuessed, setJustGuessed] = useState(false);\r\n  const [percentageDiff, setPercentageDiff] = useState(-1); \r\n  const [target, setTarget] = useState(generateRandomTarget());\r\n  const [targetsCount, setTargetsCount] = useState(0);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const diffFromTarget = Math.abs(guessedValue/255 - target);\r\n  const swatchDistance= useRef(new Animated.Value(10)).current;\r\n  const tutorialOpacity = useRef(new Animated.Value(1.0)).current;\r\n\r\n  const reset = () => {\r\n    setJustGuessed(false);\r\n    setPercentageDiff(-1);\r\n\r\n    setTarget(generateRandomTarget());\r\n    Animated.timing(swatchDistance, {\r\n      toValue: SWATCH_DISTANCE,\r\n      duration: 0,\r\n      useNativeDriver: false\r\n    }).start();\r\n    \r\n    Animated.timing(tutorialOpacity, {\r\n      toValue: 1,\r\n      duration: 1000,\r\n      useNativeDriver: false\r\n    }).start();\r\n    \r\n    setHealth(STARTING_HEALTH);\r\n    setTargetsCount(0);\r\n    setGameOver(false);\r\n  };\r\n\r\n  const updateHealth = (diff:number) => {\r\n    if(roundsToZero(diff)) {\r\n      return;\r\n    }\r\n    setHealth(old => {\r\n      return old - Math.abs(Math.round(diff));\r\n    });\r\n  };\r\n\r\n  const hideTutorial = () => {\r\n    Animated.timing(tutorialOpacity, {\r\n      toValue: 0,\r\n      duration: 1000,\r\n      useNativeDriver: false\r\n    }).start();\r\n  };\r\n  \r\n  const roundsToZero = (diff:number) => {\r\n     return Math.round(diff) === 0;\r\n  }\r\n    \r\n  \r\n  const target255 = Math.round(scaleToValue(target));\r\n  const guess255 = guessedValue; \r\n  const perfectGuess =  target255 === guess255;\r\n  const nearlyPerfect = roundsToZero(percentageDiff)  && !perfectGuess;\r\n  const notPerfectOrNearlyPerfect = perfectGuess || nearlyPerfect;\r\n  const targetMsg = targetsCount >= 1 ? `Target #${targetsCount + 1}: ` : 'Target: ';\r\n\r\n\r\n  useEffect(() => {\r\n    if(health <= 0) {\r\n      setGameOver(true);\r\n    }\r\n  }, [health]);\r\n  \r\n  const bottomContainerEl = () => {\r\n    if (gameOver) return <View style={styles.headerContainer}>\r\n      <Text style={styles.headerText}> All Health Depleted! </Text>\r\n      <View style={styles.playAgain}>\r\n      <Button title='Play Again' onPress={reset} />\r\n      </View>\r\n    </View>\r\n\r\n\r\n    return <View style={styles.bottomContainer}>\r\n      {<Animated.View style={[{\r\n        position: 'absolute',\r\n        borderRadius: 20,\r\n        left: 0,\r\n        top: -60,\r\n        padding: 10,\r\n        paddingLeft: 20,\r\n        marginRight: 10,\r\n        marginLeft: 10,\r\n        height: 60,\r\n        backgroundColor: GRAY_BG\r\n      }, { opacity: tutorialOpacity }]}>\r\n        <Text>Hey there, slide me around to match both of the color swatches!</Text>\r\n        <View style={styles.arrowDown}>\r\n        </View>\r\n      </Animated.View>}\r\n\r\n      <Slider\r\n        value={guessedValue}\r\n        minimumValue={0}\r\n        maximumValue={255}\r\n        step={1}\r\n        disabled={justGuessed}\r\n        style={[styles.slider, { opacity: justGuessed ? 0 : 1 }]}\r\n        onSlidingStart={hideTutorial}\r\n        onValueChange={(value) => {\r\n          setGuessedValue(value);\r\n        }}\r\n        minimumTrackTintColor=\"#000\"\r\n        maximumTrackTintColor=\"#000000\"\r\n        thumbTintColor={'#aaa'}\r\n      />\r\n      {justGuessed &&\r\n        <Button\r\n          title='Next Challenge'\r\n          color={GREEN}\r\n          onPress={() => {\r\n            setTargetsCount(x => x + 1);\r\n            Animated.timing(swatchDistance, {\r\n              toValue: SWATCH_DISTANCE,\r\n              duration: 100,\r\n              useNativeDriver: false\r\n            }).start();\r\n\r\n            let newTarget = generateRandomTarget();\r\n            // Don't choose something too close:\r\n            let tries = 0;\r\n            while (closeEnough(guessedValue / 255, newTarget) && tries < 10) {\r\n              tries++;\r\n              newTarget = generateRandomTarget();\r\n            }\r\n\r\n            setTarget(newTarget);\r\n            setJustGuessed(false);\r\n          }} />\r\n      }\r\n      {!justGuessed &&\r\n        <Button\r\n          title='Submit Guess'\r\n          onPress={() => {\r\n            hideTutorial();\r\n            setJustGuessed(true);\r\n            const _percentageDiff = calculateDiff(guessedValue / 255, target);\r\n            updateHealth(_percentageDiff);\r\n            setPercentageDiff(_percentageDiff);\r\n\r\n            Animated.timing(swatchDistance, {\r\n              toValue: END_SWATCH_DISTANCE,\r\n              duration: 1500,\r\n              useNativeDriver: false\r\n            }).start();\r\n          }} />\r\n      }\r\n    </View>\r\n  };\r\n \r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <View style={styles.headerContainer}>\r\n        <Text onPress={reset} style={styles.score}>\r\n          Health: {Math.round(health)}%\r\n        </Text>\r\n        <StatusBar style=\"auto\" />\r\n        {!justGuessed && <Text style={styles.resultsText}>Match the colors:</Text>}\r\n        {justGuessed && !notPerfectOrNearlyPerfect && <Text style={styles.resultsText}> You were within: {Math.round(percentageDiff)}%</Text>}\r\n        {justGuessed && nearlyPerfect && <Text style={styles.resultsText}>Nearly Perfect Guess!</Text>}\r\n        {justGuessed && perfectGuess && <Text style={styles.resultsText}>Perfect Guess!</Text>}\r\n      </View>\r\n\r\n      <View style={styles.middleContainer}>\r\n        <Animated.View style={[styles.swatchContainer, {marginBottom: swatchDistance}]}>\r\n          <View>\r\n            {!justGuessed && <Text style={styles.swatchDesc}>{targetMsg}</Text>}\r\n            {justGuessed && <Text style={styles.swatchDesc}>{targetMsg} {target255}</Text>}\r\n          </View>\r\n          <ColorView color={target} />\r\n        </Animated.View>\r\n        <View style={styles.swatchContainer}>\r\n          <ColorView color={guessedValue/255} />\r\n          <View>\r\n            {<Text style={styles.swatchDesc}>Your Guess: {guess255}</Text>}\r\n          </View>\r\n        </View>\r\n      </View>\r\n\r\n      {bottomContainerEl()}\r\n    </SafeAreaView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    display: 'flex',\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between'\r\n  },\r\n  headerContainer: {\r\n    paddingTop: 10,\r\n    alignItems: 'center'\r\n  },\r\n  middleContainer: {\r\n    width: '100%'\r\n  },\r\n  bottomContainer: {\r\n    padding: 10,\r\n    width: '100%'\r\n  },\r\n  score: {\r\n    fontSize: 22\r\n  },\r\n  resultsText: {\r\n    textAlign: 'center',\r\n    paddingTop: 20,\r\n    fontSize: 38\r\n  },\r\n  swatchContainer: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    width: '100%'\r\n  },\r\n  swatchDesc: {\r\n    padding: 10\r\n  },\r\n  slider: { \r\n    width: '100%', \r\n    height: 40 \r\n  },\r\n  arrowDown: {\r\n    position: 'absolute',\r\n    left: TRIANGLE_WIDTH/2,\r\n    bottom: -1 * TRIANGLE_WIDTH,\r\n    width: 0,\r\n    height: 0,\r\n    backgroundColor: \"transparent\",\r\n    borderStyle: \"solid\",\r\n    borderLeftWidth: TRIANGLE_WIDTH,\r\n    borderRightWidth: TRIANGLE_WIDTH,\r\n    borderBottomWidth: TRIANGLE_WIDTH * 2,\r\n    borderLeftColor: \"transparent\",\r\n    borderRightColor: \"transparent\",\r\n    borderBottomColor: GRAY_BG,\r\n    transform: [{ rotate: \"180deg\" }]\r\n  },\r\n  headerText: {\r\n    fontSize: 20,\r\n    paddingBottom: 10\r\n  },\r\n  playAgain: {\r\n    paddingBottom: 5\r\n  }\r\n});\r\n"],"sourceRoot":""}