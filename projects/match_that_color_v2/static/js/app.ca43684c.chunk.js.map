{"version":3,"sources":["src/utils/colors/index.tsx","src/components/colorView/index.tsx","App.tsx"],"names":["generateRandomTarget","Math","random","scaleToValue","value","fromLeft","toLeft","valueToColor","hex","floor","toString","length","numberToHex","ColorView","color","View","style","backgroundColor","borderRadius","width","height","App","useState","score","setScore","guessedValue","setGuessedValue","justGuessed","setJustGuessed","percentageDiff","setPercentageDiff","target","setTarget","diffFromTarget","abs","swatchDistance","useRef","Animated","Value","current","perfectGuess","round","SafeAreaView","styles","container","headerContainer","Text","onPress","timing","toValue","duration","useNativeDriver","start","StatusBar","resultsText","middleContainer","swatchContainer","marginBottom","swatchDesc","bottomContainer","disabled","slider","opacity","onValueChange","minimumValue","maximumValue","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","Button","title","guess","max","g","t","diff","console","log","calculateDiff","closeEnough","points","old","guessedCorrectly","guessedIncorrectly","StyleSheet","create","display","flex","alignItems","justifyContent","paddingTop","padding","fontSize","textAlign"],"mappings":"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","file":"static/js/app.ca43684c.chunk.js","sourcesContent":["const MAX = 1.0;\r\nconst MIN_THRESHOLD = 0.05;\r\n\r\nexport const generateRandomTarget = () => {\r\n    return Math.random();\r\n};\r\n\r\nexport const calculateDiff = (guess:number, target:number, max = 1.0) => {\r\n   const g = (guess / max);\r\n   const t = (target / max);\r\n   const diff = Math.abs(g-t);\r\n   const percentageDiff = diff * 100;\r\n   console.log('g/max', g, 't/max', t, 'diff', diff, '%', percentageDiff);\r\n   return percentageDiff;\r\n}\r\nexport const closeEnough = (guess:number, target:number) => {\r\n    const diff = Math.abs(target - guess);\r\n    console.log('diff', diff);\r\n    return diff <= MIN_THRESHOLD;\r\n};\r\n\r\nexport const numberToHex = (value:number) => {\r\n    const hex = Math.floor(value).toString(16);\r\n    if (hex.length < 2) {\r\n        return '0' + hex;\r\n    }\r\n    return hex;\r\n};\r\n\r\nexport const scale = (\r\n    number:number, \r\n    fromLeft:number, \r\n    fromRight:number, \r\n    toLeft:number, \r\n    toRight:number\r\n) => {\r\n    return toLeft + (number - fromLeft) / (fromRight - fromLeft) * (toRight - toLeft)\r\n};\r\n\r\n// 0-1 value to 0-255 value\r\nexport const scaleToValue = (value:number) => {\r\n    const transformed = scale(value, 0, MAX, 0, 255);\r\n    return transformed;\r\n};\r\nexport const valueToColor = (value:number) => {\r\n    const transformed = scaleToValue(value);\r\n    const hex = numberToHex(transformed);\r\n    return `#${hex}${hex}${hex}`;\r\n};\r\n","import { View } from 'react-native';\r\nimport { valueToColor } from 'src/utils/colors';\r\n\r\ntype Props = {\r\n    color:number;\r\n};\r\n\r\nexport default function ColorView ({ color }: Props) {\r\n    return <View\r\n        style={{\r\n            backgroundColor: valueToColor(color),\r\n            borderRadius: 50,\r\n            width: 100,\r\n            height: 100\r\n        }}\r\n    />\r\n};","import Slider from '@react-native-community/slider';\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport { useRef, useState } from 'react';\r\nimport { Button, StyleSheet, Text, View, SafeAreaView, Animated } from 'react-native';\r\nimport ColorView from 'src/components/colorView';\r\nimport { calculateDiff, closeEnough, generateRandomTarget, scaleToValue } from 'src/utils/colors';\r\n\r\n\r\nconst SWATCH_DISTANCE = 10;\r\nconst END_SWATCH_DISTANCE = -20;\r\nconst GREEN = '#0cab00';\r\n\r\nexport default function App() {\r\n  const [score, setScore] = useState(0);\r\n  const [guessedValue, setGuessedValue] = useState(0);\r\n  const [justGuessed, setJustGuessed] = useState(false);\r\n  const [percentageDiff, setPercentageDiff] = useState(-1); \r\n  const [target, setTarget] = useState(generateRandomTarget());\r\n  const diffFromTarget = Math.abs(guessedValue - target);\r\n\r\n  const swatchDistance= useRef(new Animated.Value(10)).current;\r\n\r\n  const reset = () => {\r\n    setScore(0);\r\n    setJustGuessed(false);\r\n    setPercentageDiff(-1);\r\n\r\n    Animated.timing(swatchDistance, {\r\n      toValue: SWATCH_DISTANCE,\r\n      duration: 0,\r\n      useNativeDriver: false\r\n    }).start();\r\n  };\r\n\r\n\r\n  const guessedCorrectly = () => {\r\n    const points = (1 - diffFromTarget) * 100 ;\r\n    setScore(old => {\r\n      return Math.floor(old + points);\r\n    });\r\n  };\r\n\r\n  const guessedIncorrectly = () => {\r\n    const points = diffFromTarget * 100 ;\r\n    setScore(old => {\r\n      return Math.floor(old - points);\r\n    });\r\n  };\r\n  \r\n  const perfectGuess = Math.round(percentageDiff) === 0; \r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n\r\n      <View style={styles.headerContainer}>\r\n        <Text onPress={reset} style={styles.score}>\r\n          Score: {score}\r\n        </Text>\r\n        <StatusBar style=\"auto\" />\r\n        {!justGuessed && <Text style={styles.resultsText}>Match the colors:</Text>}\r\n        {justGuessed && !perfectGuess && <Text style={styles.resultsText}> You were within: {Math.round(percentageDiff)}%</Text>}\r\n        {justGuessed && perfectGuess && <Text style={styles.resultsText}> Perfect Guess! {percentageDiff}% </Text>}\r\n      </View>\r\n\r\n      <View style={styles.middleContainer}>\r\n        <Animated.View style={[styles.swatchContainer, {marginBottom: swatchDistance}]}>\r\n          <View>\r\n            {!justGuessed && <Text style={styles.swatchDesc}>Target:</Text>}\r\n            {justGuessed && <Text style={styles.swatchDesc}>Target: {Math.round(scaleToValue(target))}</Text>}\r\n          </View>\r\n          <ColorView color={target} />\r\n        </Animated.View>\r\n        <View style={styles.swatchContainer}>\r\n          <ColorView color={guessedValue} />\r\n          <View>\r\n            {<Text style={styles.swatchDesc}>Your Guess: {Math.round(scaleToValue(guessedValue))}</Text>}\r\n          </View>\r\n        </View>\r\n      </View>\r\n\r\n      <View style={styles.bottomContainer}>\r\n        <Slider\r\n          value={guessedValue}\r\n          disabled={justGuessed}\r\n          style={[styles.slider, {opacity: justGuessed ? 0 : 1} ]}\r\n          onValueChange={(value) => {\r\n            setGuessedValue(value);\r\n          }}\r\n          minimumValue={0}\r\n          maximumValue={1}\r\n          minimumTrackTintColor=\"#000\"\r\n          maximumTrackTintColor=\"#000000\"\r\n          thumbTintColor={'#aaa'}\r\n        />\r\n        {justGuessed &&\r\n          <Button\r\n            title='Next Challenge'\r\n            color={GREEN}\r\n            onPress={() => { \r\n\r\n              Animated.timing(swatchDistance, {\r\n                toValue: SWATCH_DISTANCE,\r\n                duration: 100,\r\n                useNativeDriver: false\r\n              }).start();\r\n\r\n              setTarget(generateRandomTarget());\r\n              setJustGuessed(false); \r\n            }} />\r\n        }\r\n        {!justGuessed &&\r\n          <Button\r\n            title='Submit Guess'\r\n            onPress={() => {\r\n              setJustGuessed(true);\r\n              setPercentageDiff(calculateDiff(guessedValue, target));\r\n              if (closeEnough(guessedValue, target)) {\r\n                guessedCorrectly();\r\n              } else {\r\n                guessedIncorrectly();\r\n              }\r\n              Animated.timing(swatchDistance, {\r\n                toValue: END_SWATCH_DISTANCE,\r\n                duration: 1500,\r\n                useNativeDriver: false\r\n              }).start();\r\n\r\n\r\n              \r\n            }} />\r\n        }\r\n      </View>\r\n    </SafeAreaView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    display: 'flex',\r\n    flex: 1,\r\n    backgroundColor: '#fff',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between'\r\n  },\r\n  headerContainer: {\r\n    paddingTop: 10,\r\n    alignItems: 'center'\r\n  },\r\n  middleContainer: {\r\n    width: '100%'\r\n  },\r\n  bottomContainer: {\r\n    padding: 10,\r\n    width: '100%'\r\n  },\r\n  score: {\r\n    fontSize: 22\r\n  },\r\n  resultsText: {\r\n    textAlign: 'center',\r\n    paddingTop: 20,\r\n    fontSize: 38\r\n  },\r\n  swatchContainer: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    width: '100%'\r\n  },\r\n  swatchDesc: {\r\n    padding: 10\r\n  },\r\n  slider: { \r\n    width: '100%', \r\n    height: 40 \r\n  }\r\n});\r\n"],"sourceRoot":""}